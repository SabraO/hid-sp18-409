# coding: utf-8

"""
    Crimes API

    Identify crime prone areas near you  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Crime(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'crime_id': 'str',
        'case_number': 'str',
        'date': 'str',
        'block': 'str',
        'crime_code': 'str',
        'primary_description': 'str',
        'secondary_description': 'str',
        'location_cat': 'str',
        'arrested': 'bool',
        'domestic': 'bool',
        'beat_code': 'str',
        'district_code': 'str',
        'ward_code': 'str',
        'community_area_code': 'str',
        'fbi_code': 'str',
        'x_coordinate': 'str',
        'y_coordinate': 'str',
        'year': 'str',
        'updated_on': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'gps_location': 'str'
    }

    attribute_map = {
        'crime_id': 'crime_id',
        'case_number': 'case_number',
        'date': 'date',
        'block': 'block',
        'crime_code': 'crime_code',
        'primary_description': 'primary_description',
        'secondary_description': 'secondary_description',
        'location_cat': 'location_cat',
        'arrested': 'arrested',
        'domestic': 'domestic',
        'beat_code': 'beat_code',
        'district_code': 'district_code',
        'ward_code': 'ward_code',
        'community_area_code': 'community_area_code',
        'fbi_code': 'fbi_code',
        'x_coordinate': 'x_coordinate',
        'y_coordinate': 'y_coordinate',
        'year': 'year',
        'updated_on': 'updated_on',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'gps_location': 'gps_location'
    }

    def __init__(self, crime_id=None, case_number=None, date=None, block=None, crime_code=None, primary_description=None, secondary_description=None, location_cat=None, arrested=None, domestic=None, beat_code=None, district_code=None, ward_code=None, community_area_code=None, fbi_code=None, x_coordinate=None, y_coordinate=None, year=None, updated_on=None, latitude=None, longitude=None, gps_location=None):  # noqa: E501
        """Crime - a model defined in Swagger"""  # noqa: E501

        self._crime_id = None
        self._case_number = None
        self._date = None
        self._block = None
        self._crime_code = None
        self._primary_description = None
        self._secondary_description = None
        self._location_cat = None
        self._arrested = None
        self._domestic = None
        self._beat_code = None
        self._district_code = None
        self._ward_code = None
        self._community_area_code = None
        self._fbi_code = None
        self._x_coordinate = None
        self._y_coordinate = None
        self._year = None
        self._updated_on = None
        self._latitude = None
        self._longitude = None
        self._gps_location = None
        self.discriminator = None

        self.crime_id = crime_id
        if case_number is not None:
            self.case_number = case_number
        if date is not None:
            self.date = date
        if block is not None:
            self.block = block
        if crime_code is not None:
            self.crime_code = crime_code
        if primary_description is not None:
            self.primary_description = primary_description
        if secondary_description is not None:
            self.secondary_description = secondary_description
        if location_cat is not None:
            self.location_cat = location_cat
        if arrested is not None:
            self.arrested = arrested
        if domestic is not None:
            self.domestic = domestic
        if beat_code is not None:
            self.beat_code = beat_code
        if district_code is not None:
            self.district_code = district_code
        if ward_code is not None:
            self.ward_code = ward_code
        if community_area_code is not None:
            self.community_area_code = community_area_code
        if fbi_code is not None:
            self.fbi_code = fbi_code
        if x_coordinate is not None:
            self.x_coordinate = x_coordinate
        if y_coordinate is not None:
            self.y_coordinate = y_coordinate
        if year is not None:
            self.year = year
        if updated_on is not None:
            self.updated_on = updated_on
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if gps_location is not None:
            self.gps_location = gps_location

    @property
    def crime_id(self):
        """Gets the crime_id of this Crime.  # noqa: E501

        Unique identifier representing a specific crime according to chicago police.  # noqa: E501

        :return: The crime_id of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._crime_id

    @crime_id.setter
    def crime_id(self, crime_id):
        """Sets the crime_id of this Crime.

        Unique identifier representing a specific crime according to chicago police.  # noqa: E501

        :param crime_id: The crime_id of this Crime.  # noqa: E501
        :type: str
        """
        if crime_id is None:
            raise ValueError("Invalid value for `crime_id`, must not be `None`")  # noqa: E501

        self._crime_id = crime_id

    @property
    def case_number(self):
        """Gets the case_number of this Crime.  # noqa: E501

        Case Number.  # noqa: E501

        :return: The case_number of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._case_number

    @case_number.setter
    def case_number(self, case_number):
        """Sets the case_number of this Crime.

        Case Number.  # noqa: E501

        :param case_number: The case_number of this Crime.  # noqa: E501
        :type: str
        """

        self._case_number = case_number

    @property
    def date(self):
        """Gets the date of this Crime.  # noqa: E501

        Date of the crime.  # noqa: E501

        :return: The date of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Crime.

        Date of the crime.  # noqa: E501

        :param date: The date of this Crime.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def block(self):
        """Gets the block of this Crime.  # noqa: E501

        Block Address.  # noqa: E501

        :return: The block of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this Crime.

        Block Address.  # noqa: E501

        :param block: The block of this Crime.  # noqa: E501
        :type: str
        """

        self._block = block

    @property
    def crime_code(self):
        """Gets the crime_code of this Crime.  # noqa: E501

        IUCR by chicago police.  # noqa: E501

        :return: The crime_code of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._crime_code

    @crime_code.setter
    def crime_code(self, crime_code):
        """Sets the crime_code of this Crime.

        IUCR by chicago police.  # noqa: E501

        :param crime_code: The crime_code of this Crime.  # noqa: E501
        :type: str
        """

        self._crime_code = crime_code

    @property
    def primary_description(self):
        """Gets the primary_description of this Crime.  # noqa: E501

        Primary Type.  # noqa: E501

        :return: The primary_description of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._primary_description

    @primary_description.setter
    def primary_description(self, primary_description):
        """Sets the primary_description of this Crime.

        Primary Type.  # noqa: E501

        :param primary_description: The primary_description of this Crime.  # noqa: E501
        :type: str
        """

        self._primary_description = primary_description

    @property
    def secondary_description(self):
        """Gets the secondary_description of this Crime.  # noqa: E501

        Description.  # noqa: E501

        :return: The secondary_description of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._secondary_description

    @secondary_description.setter
    def secondary_description(self, secondary_description):
        """Sets the secondary_description of this Crime.

        Description.  # noqa: E501

        :param secondary_description: The secondary_description of this Crime.  # noqa: E501
        :type: str
        """

        self._secondary_description = secondary_description

    @property
    def location_cat(self):
        """Gets the location_cat of this Crime.  # noqa: E501

        Location Description/catogery.  # noqa: E501

        :return: The location_cat of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._location_cat

    @location_cat.setter
    def location_cat(self, location_cat):
        """Sets the location_cat of this Crime.

        Location Description/catogery.  # noqa: E501

        :param location_cat: The location_cat of this Crime.  # noqa: E501
        :type: str
        """

        self._location_cat = location_cat

    @property
    def arrested(self):
        """Gets the arrested of this Crime.  # noqa: E501

        Arrested.  # noqa: E501

        :return: The arrested of this Crime.  # noqa: E501
        :rtype: bool
        """
        return self._arrested

    @arrested.setter
    def arrested(self, arrested):
        """Sets the arrested of this Crime.

        Arrested.  # noqa: E501

        :param arrested: The arrested of this Crime.  # noqa: E501
        :type: bool
        """

        self._arrested = arrested

    @property
    def domestic(self):
        """Gets the domestic of this Crime.  # noqa: E501

        Domestic.  # noqa: E501

        :return: The domestic of this Crime.  # noqa: E501
        :rtype: bool
        """
        return self._domestic

    @domestic.setter
    def domestic(self, domestic):
        """Sets the domestic of this Crime.

        Domestic.  # noqa: E501

        :param domestic: The domestic of this Crime.  # noqa: E501
        :type: bool
        """

        self._domestic = domestic

    @property
    def beat_code(self):
        """Gets the beat_code of this Crime.  # noqa: E501

        Beat Code.  # noqa: E501

        :return: The beat_code of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._beat_code

    @beat_code.setter
    def beat_code(self, beat_code):
        """Sets the beat_code of this Crime.

        Beat Code.  # noqa: E501

        :param beat_code: The beat_code of this Crime.  # noqa: E501
        :type: str
        """

        self._beat_code = beat_code

    @property
    def district_code(self):
        """Gets the district_code of this Crime.  # noqa: E501

        District Code.  # noqa: E501

        :return: The district_code of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._district_code

    @district_code.setter
    def district_code(self, district_code):
        """Sets the district_code of this Crime.

        District Code.  # noqa: E501

        :param district_code: The district_code of this Crime.  # noqa: E501
        :type: str
        """

        self._district_code = district_code

    @property
    def ward_code(self):
        """Gets the ward_code of this Crime.  # noqa: E501

        Ward Code.  # noqa: E501

        :return: The ward_code of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._ward_code

    @ward_code.setter
    def ward_code(self, ward_code):
        """Sets the ward_code of this Crime.

        Ward Code.  # noqa: E501

        :param ward_code: The ward_code of this Crime.  # noqa: E501
        :type: str
        """

        self._ward_code = ward_code

    @property
    def community_area_code(self):
        """Gets the community_area_code of this Crime.  # noqa: E501

        Community Area code.  # noqa: E501

        :return: The community_area_code of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._community_area_code

    @community_area_code.setter
    def community_area_code(self, community_area_code):
        """Sets the community_area_code of this Crime.

        Community Area code.  # noqa: E501

        :param community_area_code: The community_area_code of this Crime.  # noqa: E501
        :type: str
        """

        self._community_area_code = community_area_code

    @property
    def fbi_code(self):
        """Gets the fbi_code of this Crime.  # noqa: E501

        FBI Code.  # noqa: E501

        :return: The fbi_code of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._fbi_code

    @fbi_code.setter
    def fbi_code(self, fbi_code):
        """Sets the fbi_code of this Crime.

        FBI Code.  # noqa: E501

        :param fbi_code: The fbi_code of this Crime.  # noqa: E501
        :type: str
        """

        self._fbi_code = fbi_code

    @property
    def x_coordinate(self):
        """Gets the x_coordinate of this Crime.  # noqa: E501

        X Coordinate.  # noqa: E501

        :return: The x_coordinate of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._x_coordinate

    @x_coordinate.setter
    def x_coordinate(self, x_coordinate):
        """Sets the x_coordinate of this Crime.

        X Coordinate.  # noqa: E501

        :param x_coordinate: The x_coordinate of this Crime.  # noqa: E501
        :type: str
        """

        self._x_coordinate = x_coordinate

    @property
    def y_coordinate(self):
        """Gets the y_coordinate of this Crime.  # noqa: E501

        Y Coordinate.  # noqa: E501

        :return: The y_coordinate of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._y_coordinate

    @y_coordinate.setter
    def y_coordinate(self, y_coordinate):
        """Sets the y_coordinate of this Crime.

        Y Coordinate.  # noqa: E501

        :param y_coordinate: The y_coordinate of this Crime.  # noqa: E501
        :type: str
        """

        self._y_coordinate = y_coordinate

    @property
    def year(self):
        """Gets the year of this Crime.  # noqa: E501

        Year of the crime.  # noqa: E501

        :return: The year of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this Crime.

        Year of the crime.  # noqa: E501

        :param year: The year of this Crime.  # noqa: E501
        :type: str
        """

        self._year = year

    @property
    def updated_on(self):
        """Gets the updated_on of this Crime.  # noqa: E501

        Last Updated On.  # noqa: E501

        :return: The updated_on of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Crime.

        Last Updated On.  # noqa: E501

        :param updated_on: The updated_on of this Crime.  # noqa: E501
        :type: str
        """

        self._updated_on = updated_on

    @property
    def latitude(self):
        """Gets the latitude of this Crime.  # noqa: E501

        Latitude.  # noqa: E501

        :return: The latitude of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Crime.

        Latitude.  # noqa: E501

        :param latitude: The latitude of this Crime.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this Crime.  # noqa: E501

        Longitude.  # noqa: E501

        :return: The longitude of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Crime.

        Longitude.  # noqa: E501

        :param longitude: The longitude of this Crime.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def gps_location(self):
        """Gets the gps_location of this Crime.  # noqa: E501

        GPS Location.  # noqa: E501

        :return: The gps_location of this Crime.  # noqa: E501
        :rtype: str
        """
        return self._gps_location

    @gps_location.setter
    def gps_location(self, gps_location):
        """Sets the gps_location of this Crime.

        GPS Location.  # noqa: E501

        :param gps_location: The gps_location of this Crime.  # noqa: E501
        :type: str
        """

        self._gps_location = gps_location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Crime):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
